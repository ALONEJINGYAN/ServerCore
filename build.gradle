plugins {
    id "architectury-plugin" version "3.4-SNAPSHOT"
    id "dev.architectury.loom" version "1.1-SNAPSHOT" apply false
    id "io.github.juuxel.loom-quiltflower" version "1.8.0" apply false
}

subprojects {
    apply plugin: "dev.architectury.loom"
    apply plugin: "io.github.juuxel.loom-quiltflower"

    loom {
        silentMojangMappingsLicense()
        accessWidenerPath.set(project(":common").file("src/main/resources/servercore.accesswidener"))
    }

    repositories {
        maven { url 'https://repo.spongepowered.org/repository/maven-public/' }
        maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
        maven { url "https://maven.nucleoid.xyz/" }
        maven { url "https://maven.parchmentmc.org" }
        maven { url 'https://jitpack.io' }
        mavenCentral()
    }

    dependencies {
        minecraft "com.mojang:minecraft:${project.minecraft}"

        // Mappings
        if (project.parchment.isEmpty()) {
            mappings loom.officialMojangMappings()
        } else {
            mappings loom.layered() {
                officialMojangMappings()
                parchment("org.parchmentmc.data:parchment-${project.parchment}@zip")
            }
        }

        // Spark API
        compileOnly "me.lucko:spark-api:${project.spark_api}"

        // Night Config
        implementation "com.electronwill.night-config:core:${project.nightconfig}"
        implementation "com.electronwill.night-config:toml:${project.nightconfig}"

        // Mixin Extras
        implementation "com.github.LlamaLad7:MixinExtras:${project.mixin_extras}"
        annotationProcessor "com.github.LlamaLad7:MixinExtras:${project.mixin_extras}"
    }
}

allprojects {
    apply plugin: "java"
    apply plugin: "architectury-plugin"
    apply plugin: "maven-publish"

    group = project.maven_group
    mod_version = "${mod_version}+${minecraft}"

    tasks.withType(JavaCompile).configureEach {
        options.encoding = "UTF-8"
        options.release.set(17)
    }

    java {
        toolchain.languageVersion = JavaLanguageVersion.of(17)
        withSourcesJar()
    }
}