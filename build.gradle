plugins {
    id 'fabric-loom' version '0.12+'
    id 'io.github.juuxel.loom-quiltflower' version '1.7.3'
    id 'maven-publish'
}

repositories {
    maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
    maven { url "https://maven.nucleoid.xyz/" }
    maven { url "https://maven.parchmentmc.org" }
    mavenCentral()
}

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

version = "${mod_version}-${minecraft}"
archivesBaseName = project.archives_base_name
group = project.maven_group

loom {
    accessWidenerPath.set(file("src/main/resources/servercore.accesswidener"))
}

dependencies {
    minecraft "com.mojang:minecraft:${project.minecraft}"
    modImplementation "net.fabricmc:fabric-loader:${project.fabric_loader}"

    // Mappings
    if (project.parchment.isEmpty()) {
        mappings loom.officialMojangMappings()
    } else {
        mappings loom.layered() {
            officialMojangMappings()
            parchment("org.parchmentmc.data:parchment-${project.parchment}@zip")
        }
    }

    // Fabric API
    Set<String> modules = ['fabric-api-base', 'fabric-command-api-v2', 'fabric-lifecycle-events-v1']
    modules.forEach {
        modImplementation(include(fabricApi.module(it, project.fabric_api)))
    }

    // Spark API
    modImplementation(include("me.lucko:spark-api:${spark_api}"))

    // Permission API
    modImplementation(include("me.lucko:fabric-permissions-api:${permission_api}"))

    // Placeholder API
    modImplementation(include("eu.pb4:placeholder-api:${placeholder_api}"))

    // Night Config
    implementation(include("com.electronwill.night-config:core:${nightconfig}"))
    implementation(include("com.electronwill.night-config:toml:${nightconfig}"))
}

processResources {
    inputs.property "version", version

    filesMatching("fabric.mod.json") {
        expand "version": version
    }
}

tasks.withType(JavaCompile).configureEach {
    // noinspection all
    it.options.release = 17
}

java {
    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}" }
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
        // Notice: This block does NOT have the same function as the block in the top level.
        // The repositories here will be used for publishing your artifact, not for
        // retrieving dependencies.
    }
}